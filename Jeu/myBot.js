const Discord = require('discord.js');
// const fs = require('fs');
const myBot = require('./myBot.js');
const initJeu = require('./initJeu.js');
const finJeu = require('./finJeu.js');
const event = require('./event.js');
// const insuline = require('./priseInsuline.js');
const sfm = require('./saveFileManagement.js');
// const as = require('./affichageStats.js');

const client = new Discord.Client();

const config = require('./token.json');
const perso = require('./perso.json');
const tableaux = require('./tableaux.json');

// listes pour les activit√©s que le joueur peut pratiquer

const emoteActiviteM = ['üö¥', 'üéÆ', 'üé∏', 'üèÉ'];
const emoteActiviteA = ['‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'üéæ', 'üèê', '‚õ≥', 'üèì', 'üè∏', 'üèã', 'üèπ', 'üé≥', 'üéÆ', 'üé£'];
const emoteActiviteS = ['üï∫', 'üç∑', 'üì∫', 'üõè'];
const emoteRepasM = ['üçè', 'üçû', 'üç´', 'ü•ê', 'üçå'];
const emoteRepasS = ['üçî', 'üç∞', 'üç®', 'üçï', 'üçñ', 'ü•ó', 'üçö'];

// const pseudoJ = 'Alain';

client.on('ready', () => {
  console.log('Bot has started, with ${client.users.size} users, in ${client.channels.size} channels of ${client.guilds.size} guilds.');
  client.user.setActivity('manger des ventilateurs');
});

client.on('error', error => {
  const errorTime = new Date().toUTCString();
  const errorLog = errorTime + ' : The server lost connexion\n \n';
  console.log(errorLog);
  throw error;
});

client.on('message', (message) => {

	if (!message.content.startsWith(config.prefix) || message.author.bot) return;

    if (message.content.startsWith(config.prefix)) {
      const args = message.content.slice(config.prefix.length).trim().split(/ +/g);
      const command = args.shift().toLowerCase();
      const partie = sfm.loadSave(message.author.id);

      switch(command) {
        case 'start':
          partie.nbJour = 1;
          sfm.save(message.author.id, partie);
          initJeu.initJeu(message, client);
          break;
        case 'end':
          finJeu.finJeu(message);
          break;
            /* case "perso" :
                choixPerso(message);
                break;
        	case "stats":
                const f = [10,30,45];
        		as.graphString(0, 100, f, message, partie);
        		break;
            case "cons":
                console.log(partie.activite);
                console.log(partie.consequence);
                break;
            case 'insu':
                insuline.priseInsuline(message);
                break;*/
        case 'text':
          text(message);
          break;
        default:
          message.channel.send('Commande inconnue');
          break;
		}
  }
});

client.on('messageReactionAdd', (reaction, user) => {

	if(user.bot) return;

  const partie = sfm.loadSave(user.id);

  let tabNR = []; // tableau de nom de repas
  let tabNA = []; // tableau de nom d'activit√©s
  let tabER = []; // tableau d'emote de repas
  let tabEA = []; // tableau d'emote d'activit√©s

  switch(partie.partJour) {
      case 0:
          tabNR = tableaux.nomRepasM;
          tabER = emoteRepasM;
          tabNA = tableaux.nomActiviteM;
          tabEA = emoteActiviteM;
          break;
      case 1:
          tabNR = tableaux.nomRepasS;
          tabER = emoteRepasS;
          tabNA = tableaux.nomActiviteA;
          tabEA = emoteActiviteA;
          break;
      case 2:
          tabNR = tableaux.nomRepasS;
          tabER = emoteRepasS;
          tabNA = tableaux.nomActiviteS;
          tabEA = emoteActiviteS;
          break;
      default:
          console.log('Partie du jour inconnue.');
  }

  switch(reaction.emoji.name) {
      case '‚úÖ':
          // reaction.message.delete();
          // event.event(reaction.message, partie, tabNR, tabER);
          choixPerso(reaction.message);
          break;
      case '‚ùå':
          if(partie.numEvent == 1) {
              writeAct(user.id, 'rienM', partie);
              event.event(reaction.message, partie, tabNA, tabEA);
          }
          else {
              writeAct(user.id, 'rienA', partie);
              partie.partJour = (partie.partJour + 1) % 3;
              sfm.save(partie.player, partie);
              event.event(reaction.message, partie, tabNR, tabER);
          }
          break;
      case '‚û°':
          event.event(reaction.message, partie, tabNR, tabER);
          break;
      case 'üîö':
          finJeu.finJeu(reaction.message);
          break;
      default:
          break;
    }

    if(reaction.emoji.name == 'üá¶'
    || reaction.emoji.name == 'üáß'
    || reaction.emoji.name == 'üá®'
    || reaction.emoji.name == 'üá©') {
      let numPerso = -1;
      switch(reaction.emoji.name) {
        case 'üá¶':
          numPerso = 0;
          break;
        case 'üáß':
          numPerso = 1;
          break;
        case 'üá®':
          numPerso = 2;
          break;
        case 'üá©':
          numPerso = 3;
          break;
      }

      const chanId = myBot.messageChannel(reaction.message, 'personnage', partie);

      reaction.message.guild.channels.get(chanId).send({ embed: {
          color: 15013890,
          fields: [{
              name: 'Channel Personnage',
              value: 'Voici le channel personnage.\nC\'est dans ce channel que vous pouvez voir les informations concernant votre personnage.',
          }],
      } }).then(() => {
        reaction.message.guild.channels.get(chanId).send({ embed: {
          color: 0x00AE86,
          title: '__**Personnage**__',
          fields: [{
              name: 'Nom',
              value: perso.nom[numPerso],
          },
          {
              name: 'Sexe',
              value: perso.sexe[numPerso],
          },
          {
              name: 'Age',
              value: perso.age[numPerso],
          },
          {
              name: 'Taille',
              value: perso.taille[numPerso],
          },
          {
              name: 'Poids',
              value: perso.poids[numPerso],
          }],
        } })
        .then(() => {
            event.event(reaction.message, partie, tabNR, tabER);
        });
      });

      const chanId2 = myBot.messageChannel(reaction.message, 'informations', partie);

      reaction.message.guild.channels.get(chanId2).send({ embed: {
          color: 15013890,
          fields: [{
              name: 'Channel Informations',
              value: 'Voici le channel informations.\nAvant chaque prise d\'insuline, un graphique montrant l\'√©volution de votre taux de glyc√©mie apparaitra dans ce channel.',
          }],
      } });
    }

    // Quand on choisi le repas
    if(tabER.includes(reaction.emoji.name)) {
        var i = 0;
        while(tabER[i] != reaction.emoji.name)
            i++;
        writeAct(user.id, tabNR[i], partie);
        event.event(reaction.message, partie, tabNA, tabEA);
    }

    // Quand on choisi la sport
	if(tabEA.includes(reaction.emoji.name)) {
        var i = 0;
        while(tabEA[i] != reaction.emoji.name)
            i++;
        writeAct(user.id, tabNA[i], partie);
        partie.partJour = (partie.partJour + 1) % 3;
        sfm.save(partie.player, partie);
        event.event(reaction.message, partie, tabNR, tabER);
    }
});

client.on('guildMemberAdd', (member) => {
    finJeu.initStat(member.user);
});

client.on('guildMemberRemove', (member) => {
    sfm.deleteSave(member.id);
});

/**
* Fonction qui renvoie l'id du channel qui a pour nom chanName
* @param {string} message - Message discord
* @param {string} chanName - Nom du channel dans lequel le message sera envoy√©
* @param {Object} partie - Objet json de la partie
* @returns {number} Identifiant du channel
**/
exports.messageChannel = function messageChannel(message, chanName, partie) {

	const listChan2 = finJeu.listChan(message, partie);

    let id = 1;

    listChan2.forEach(channel => {
        if(channel.name === chanName) {
            const chan = message.guild.channels.find(chann => {
                if(chann.name == chanName) {
                    return chann;
                }
            });
            id = chan.id;
        }
    });
    return id;  //----------Modifi√©----------//
};

/**
* Fonction qui ajoute une activit√© √† la liste des activit√©s de l'utilisateur
* @param {Snowflake} userId - Identifiant de l'utilisateur
* @param {string} text - Activit√© qui sera mis dans la liste
* @param {Object} partie - Objet json de la partie
* @param {string[]} partie.activite - Objet json de la partie
**/
function writeAct(userId, text, partie) {
    partie.activite.push(text);
    sfm.save(userId, partie);
}

/**
* Fonction qui choisit un nombre al√©atoire entre 0 et max
* @param {number} max - Borne sup√©rieur
* @returns {number} Identifiant du channel
**/
exports.getRandomInt = function getRandomInt(max) {
    const x = Math.floor(Math.random() * Math.floor(max));
    return x;
};

/**
* Fonction qui √©crit le texte explicatif sur le serveur Discord
* @param {string} message - Message discord
**/
function text(message) {

    message.delete();

    const embed = new Discord.RichEmbed()
    .setColor(0x00AE86)
    .setTitle('Bienvenue dans Mellitus')

    .addField('Qu\'est ce que Mellitus ?', 'Mellitus est un jeu s√©rieux qui vous met dans la peau d\'une personne diab√©tique.\nVotre but est de stabiliser votre niveau d\'insuline jusqu\'√† la fin de la partie.')
    .addField('Comment jouer ?', 'La partie est divis√©e en jour et chaque jour est une suite de choix. A chaque choix, ses cons√©quences.\n Durant la partie, vous ferez vos choix de 2 fa√ßons diff√©rentes : sous forme de texte ou sous forme de boutons.\nLe jeu n\'√©tant pas termin√©, il ne peut accueillir qu\'un seul joueur √† la fois.')
    .addField('Lancer le tutoriel : ', '/start')
    .addField('Commande d\'arr√™t d\'urgence : ', '/end');

    message.channel.send({ embed });
}

/**
* Fonction qui pr√©sente les personnages pr√©d√©finis
* @param {string} message - Message discord
**/
function choixPerso(message) {

    async function clear() {
        // message.delete();
        const fetched = await message.channel.fetchMessages();
        message.channel.bulkDelete(fetched);
    }

    clear()
    .catch((err) => {
        console.log(err);
    });

    const embed = new Discord.RichEmbed()
    .setColor(15013890)

    .setTitle('__**Phase personnage**__')
    .addField('üë∂ üë¶ üëß üë® üë© üë¥ üëµ', 'C\'est ici que vous devez choisir un personnage.\nChaque personnage a des caract√©ristiques diff√©rentes, qui influeront sur votre partie.\nPour choisir un personnage, cliquez sur la r√©action correspondant au num√©ro du personnage choisit.');

    message.channel.send({ embed })
    .then((msg) => {
      for(let i = 0; i < 3; i++) {
          writePerso(msg, i);
      }

    msg.channel.send({ embed: {
        color: 0x00AE86,
        title: '__**Personnage D**__',
        fields: [{
            name: 'Nom',
            value: perso.nom[3],
          },
          {
            name: 'Sexe',
            value: perso.sexe[3],
          },
          {
            name: 'Age',
            value: perso.age[3],
          },
          {
            name: 'Taille',
            value: perso.taille[3],
          },
          {
            name: 'Poids',
            value: perso.poids[3],
          },
        ],
      },
    })
    .then(async function(mess) {
        await mess.react('üá¶');
        await mess.react('üáß');
        await mess.react('üá®');
        await mess.react('üá©');
    });
  });
}

/**
* Fonction qui √©crit le texte d'un personnage
* @param {string} message - Message discord
* @param {string} numPerso - Num√©ro du personnage
**/
function writePerso(message, numPerso) {

    let i = '';

    switch(numPerso) {
        case 0:
            i = 'A';
            break;
        case 1:
            i = 'B';
            break;
        case 2:
            i = 'C';
            break;
        case 3:
            i = 'D';
            break;
    }

    message.channel.send({ embed: {
        color: 0x00AE86,
        title: '__**Personnage ' + i + '**__',
        fields: [{
            name: 'Nom',
            value: perso.nom[numPerso],
          },
          {
            name: 'Sexe',
            value: perso.sexe[numPerso],
          },
          {
            name: 'Age',
            value: perso.age[numPerso],
          },
          {
            name: 'Taille',
            value: perso.taille[numPerso],
          },
          {
            name: 'Poids',
            value: perso.poids[numPerso],
          },
        ],
      },
    });
}

client.login(config.token);
